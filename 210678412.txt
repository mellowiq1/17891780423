--[[

::::    ::::        :::    ::: :::    ::: :::::::::  
+:+:+: :+:+:+       :+:    :+: :+:    :+: :+:    :+: 
+:+ +:+:+ +:+       +:+    +:+ +:+    +:+ +:+    +:+ 
+#+  +:+  +#+       +#++:++#++ +#+    +:+ +#++:++#+  
+#+       +#+       +#+    +#+ +#+    +#+ +#+    +#+ 
#+#       #+#       #+#    #+# #+#    #+# #+#    #+# 
###       ###       ###    ###  ########  #########  

]]--

local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 2 - 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (((13848 - 9009) >= (7142 - 3442)) and (Byte(byte, 4 - 2) == 81)) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 635 - (555 + 64)));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if (End or ((5524 - (857 + 74)) <= 2672) or ((1643 - (367 + 201)) > (2845 - (214 + 713)))) then
			local Res = (Bit / ((1 + 1) ^ (Start - 1))) % ((1 + 1) ^ (((End - 1) - (Start - (878 - (282 + 595)))) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - (1638 - (1523 + 114)));
			return (((Bit % (Plc + Plc)) >= Plc) and (1 + 0)) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + (1 - 0);
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + (1067 - (68 + 997)));
		DIP = DIP + (1272 - (226 + 1044));
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + (17 - 13);
		return (d * (16777333 - (32 + 85))) + (c * 65536) + (b * (251 + 5)) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1 + 0, 977 - (892 + 65)) * ((4 - 2) ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -(1 - 0)) or (1 - 0);
		if (Exponent == (350 - (87 + 263))) then
			if (((576 - (67 + 113)) <= 3804) and ((Mantissa == (0 + 0)) or ((2867 - 1699) > (2322 + 834)))) then
				return Sign * (0 - 0);
			else
				Exponent = 953 - (802 + 150);
				IsNormal = 0;
			end
		elseif ((Exponent == 2047) or ((1539 - 967) > 4486)) then
			return ((Mantissa == 0) and (Sign * ((1 - 0) / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - (745 + 278)) * (IsNormal + (Mantissa / ((999 - (915 + 82)) ^ (147 - 95))));
	end
	local function gString(Len)
		local Str;
		if (not Len or ((2429 + 1740) == (2875 - 688))) then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1188 - (1069 + 118), #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1 - 0, ConstCount do
			local Type = gBits8();
			local Cons;
			if ((1404 == (245 + 1159)) and (Type == (1 - 0))) then
				Cons = gBits8() ~= 0;
			elseif ((1406 == (1395 + 11)) and (Type == 2)) then
				Cons = gFloat();
			elseif (((2322 - (368 + 423)) < (13422 - 9151)) and (Type == (21 - (10 + 8)))) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 3 - 2, gBits32() do
			local Descriptor = gBits8();
			if (((1077 - (416 + 26)) == (2027 - 1392)) and ((gBit(Descriptor, 1, 1 + 0) == (0 - 0)) or ((4186 - (145 + 293)) < 2212))) then
				local Type = gBit(Descriptor, 432 - (44 + 386), 1489 - (998 + 488));
				local Mask = gBit(Descriptor, 2 + 2, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if ((Type == 0) or (1180 == 2180)) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif (((5228 - (116 + 1022)) < (19371 - 14718)) and (Type == 1)) then
					Inst[2 + 1] = gBits32();
				elseif ((3373 <= 3556) and (Type == 2)) then
					Inst[3] = gBits32() - ((7 - 5) ^ 16);
				elseif ((Type == 3) or (3291 < (11647 - 8367))) then
					Inst[3] = gBits32() - ((861 - (814 + 45)) ^ 16);
					Inst[9 - 5] = gBits16();
				end
				if ((gBit(Mask, 1, 1) == 1) or ((143 + 2509) < (70 + 126))) then
					Inst[887 - (261 + 624)] = Consts[Inst[2]];
				end
				if ((4135 < (8560 - 3743)) and (gBit(Mask, 2, 1082 - (1020 + 60)) == (1424 - (630 + 793)))) then
					Inst[9 - 6] = Consts[Inst[14 - 11]];
				end
				if ((4386 >= (344 + 529)) and (gBit(Mask, 3, 3) == (3 - 2))) then
					Inst[1751 - (760 + 987)] = Consts[Inst[1917 - (1789 + 124)]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[767 - (745 + 21)];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1 + 0;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0 - 0, PCount do
				if ((921 <= 1102) and (Idx >= Params)) then
					Vararg[Idx - Params] = Args[Idx + 1 + 0];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1 + 0;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (((1327 - (87 + 968)) == 272) and (Enum <= (123 - 95))) then
					if (((4270 + 436) >= 963) and (Enum <= (29 - 16))) then
						if (Enum <= (1419 - (447 + 966))) then
							if ((((273 - 173) <= (4940 - (1703 + 114))) and (Enum <= 2)) or ((1661 - (376 + 325)) <= (1435 - 559))) then
								if (Enum <= 0) then
									local A = Inst[5 - 3];
									Stk[A] = Stk[A](Stk[A + 1]);
								elseif ((Enum > 1) or ((591 + 1475) == (2052 - 1120))) then
									do
										return;
									end
								else
									Stk[Inst[2]] = Upvalues[Inst[3]];
								end
							elseif (((4839 - (9 + 5)) < (5219 - (85 + 291))) and (Enum <= 4)) then
								if ((Enum > (1268 - (243 + 1022))) or (3877 >= (17263 - 12726))) then
									VIP = Inst[3];
								else
									local B = Stk[Inst[4 + 0]];
									if (not B or (1369 > (6167 - (1123 + 57)))) then
										VIP = VIP + 1 + 0;
									else
										Stk[Inst[256 - (163 + 91)]] = B;
										VIP = Inst[1933 - (1869 + 61)];
									end
								end
							elseif (Enum > (2 + 3)) then
								if Stk[Inst[6 - 4]] then
									VIP = VIP + (1 - 0);
								else
									VIP = Inst[3];
								end
							else
								local A = Inst[1 + 1];
								Stk[A] = Stk[A](Unpack(Stk, A + (1 - 0), Inst[3 + 0]));
							end
						elseif (Enum <= 9) then
							if ((Enum <= 7) or (4315 < 1726)) then
								if ((Inst[1476 - (1329 + 145)] == Stk[Inst[975 - (140 + 831)]]) or (3679 < (2475 - (1409 + 441)))) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif ((Enum == (726 - (15 + 703))) or ((2142 + 2483) < 632)) then
								local A = Inst[2];
								local C = Inst[442 - (262 + 176)];
								local CB = A + (1723 - (345 + 1376));
								local Result = {Stk[A](Stk[A + 1], Stk[CB])};
								for Idx = 1, C do
									Stk[CB + Idx] = Result[Idx];
								end
								local R = Result[689 - (198 + 490)];
								if (R or ((3812 - 2949) >= 4584) or (83 > 1780)) then
									Stk[CB] = R;
									VIP = Inst[6 - 3];
								else
									VIP = VIP + (1207 - (696 + 510));
								end
							else
								Stk[Inst[3 - 1]] = Inst[3];
							end
						elseif (Enum <= (1273 - (1091 + 171))) then
							if ((546 <= (174 + 903)) and ((Enum > 10) or (724 >= 1668))) then
								local A = Inst[2];
								local B = Stk[Inst[3]];
								Stk[A + (3 - 2)] = B;
								Stk[A] = B[Inst[12 - 8]];
							else
								Stk[Inst[2]][Inst[377 - (123 + 251)]] = Inst[19 - 15];
							end
						elseif (Enum == 12) then
							local B = Stk[Inst[702 - (208 + 490)]];
							if ((((37 + 391) < (804 + 1000)) and B) or ((1832 - (660 + 176)) > 4301)) then
								VIP = VIP + 1 + 0;
							else
								Stk[Inst[204 - (14 + 188)]] = B;
								VIP = Inst[678 - (534 + 141)];
							end
						else
							for Idx = Inst[1 + 1], Inst[3 + 0] do
								Stk[Idx] = nil;
							end
						end
					elseif ((4070 > (661 + 26)) and ((Enum <= 20) or ((6987 - 3662) > 4613))) then
						if (Enum <= (25 - 9)) then
							if ((Enum <= (39 - 25)) or (4950 <= (2445 + 2108)) or ((418 + 238) >= (3726 - (115 + 281)))) then
								local A = Inst[4 - 2];
								local Results = {Stk[A](Stk[A + 1 + 0])};
								local Edx = 0 - 0;
								for Idx = A, Inst[4] do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							elseif ((((9772 - 7107) <= 3933) and (Enum > (882 - (550 + 317)))) or ((3600 - 1108) <= (470 - 135))) then
								local A = Inst[5 - 3];
								local T = Stk[A];
								for Idx = A + (286 - (134 + 151)), Inst[1668 - (970 + 695)] do
									Insert(T, Stk[Idx]);
								end
							else
								local A = Inst[3 - 1];
								local Results = {Stk[A](Stk[A + 1])};
								local Edx = 1990 - (582 + 1408);
								for Idx = A, Inst[13 - 9] do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							end
						elseif (((5437 - 1115) >= (9654 - 7092)) and (Enum <= 18)) then
							if (((3273 == 3273) and (Enum > (1841 - (1195 + 629)))) or (3637 >= 3770)) then
								local A = Inst[2 - 0];
								local C = Inst[4];
								local CB = A + (243 - (187 + 54));
								local Result = {Stk[A](Stk[A + 1], Stk[CB])};
								for Idx = 1, C do
									Stk[CB + Idx] = Result[Idx];
								end
								local R = Result[1];
								if (((3824 > (287 + 122)) and R) or ((1585 + 794) > 4578)) then
									Stk[CB] = R;
									VIP = Inst[3];
								else
									VIP = VIP + (1 - 0);
								end
							else
								local A = Inst[2 - 0];
								Stk[A] = Stk[A]();
							end
						elseif (Enum == 19) then
							local B = Inst[3];
							local K = Stk[B];
							for Idx = B + 1 + 0, Inst[4] do
								K = K .. Stk[Idx];
							end
							Stk[Inst[2]] = K;
						else
							local NewProto = Proto[Inst[3]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1][Val[2]];
							end,__newindex=function(_, Key, Value)
								local Val = Indexes[Key];
								Val[1637 - (1373 + 263)][Val[2]] = Value;
							end});
							for Idx = 1, Inst[4] do
								VIP = VIP + (1001 - (451 + 549));
								local Mvm = Instr[VIP];
								if ((2087 == (659 + 1428)) and (Mvm[1 - 0] == 43)) then
									Indexes[Idx - 1] = {Stk,Mvm[1387 - (746 + 638)]};
								else
									Indexes[Idx - (1 + 0)] = {Upvalues,Mvm[3]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
						end
					elseif ((Enum <= 24) or ((3745 - (218 + 123)) > (6084 - (1535 + 46)))) then
						if ((Enum <= (22 + 0)) or ((508 + 2998) <= 1309)) then
							if ((((3515 - (306 + 254)) == 2955) and (Enum > 21)) or (483 > (46 + 697))) then
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + (1 - 0), Inst[1470 - (899 + 568)]));
							else
								Upvalues[Inst[2 + 1]] = Stk[Inst[4 - 2]];
							end
						elseif (((3057 - (268 + 335)) > 578) and ((Enum == 23) or (2903 == 1495))) then
							local NewProto = Proto[Inst[293 - (60 + 230)]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1][Val[2]];
							end,__newindex=function(_, Key, Value)
								local Val = Indexes[Key];
								Val[573 - (426 + 146)][Val[1 + 1]] = Value;
							end});
							for Idx = 1457 - (282 + 1174), Inst[4] do
								VIP = VIP + 1;
								local Mvm = Instr[VIP];
								if (Mvm[812 - (569 + 242)] == 43) then
									Indexes[Idx - (2 - 1)] = {Stk,Mvm[1027 - (706 + 318)]};
								else
									Indexes[Idx - (1252 - (721 + 530))] = {Upvalues,Mvm[7 - 4]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
						else
							local B = Stk[Inst[4]];
							if (((4046 + 500) >= 2275) and not B) then
								VIP = VIP + (701 - (271 + 429));
							else
								Stk[Inst[2]] = B;
								VIP = Inst[3];
							end
						end
					elseif (((855 + 75) < (5958 - (1408 + 92))) and (Enum <= (1112 - (461 + 625)))) then
						if (((1950 - (993 + 295)) <= 972) and ((43 + 776) >= (1193 - (418 + 753))) and (Enum == 25)) then
							local A = Inst[1 + 1];
							Stk[A] = Stk[A](Stk[A + 1]);
						else
							Stk[Inst[2]][Inst[1 + 2]] = Stk[Inst[4]];
						end
					elseif (Enum == 27) then
						Stk[Inst[1 + 1]][Inst[1 + 2]] = Inst[4];
					else
						local A = Inst[531 - (406 + 123)];
						Stk[A] = Stk[A]();
					end
				elseif ((4370 == (6139 - (1749 + 20))) and (3162 == 3162) and (Enum <= 43)) then
					if ((Enum <= (9 + 26)) or (4762 <= 861)) then
						if (Enum <= (1353 - (1249 + 73))) then
							if ((Enum <= 29) or (2369 > (1581 + 2848))) then
								for Idx = Inst[1147 - (466 + 679)], Inst[6 - 3] do
									Stk[Idx] = nil;
								end
							elseif (((11712 - 7617) >= 3183) and (Enum == 30)) then
								Stk[Inst[1902 - (106 + 1794)]][Stk[Inst[3]]] = Stk[Inst[2 + 2]];
							elseif Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum <= (9 + 24)) then
							if ((Enum == 32) or ((4168 - 2756) == (11546 - 7282))) then
								local A = Inst[2];
								Stk[A](Stk[A + 1]);
							else
								Stk[Inst[2]] = {};
							end
						elseif ((Enum > 34) or ((3825 - (4 + 110)) < (1592 - (57 + 527)))) then
							Stk[Inst[2]] = Upvalues[Inst[1430 - (41 + 1386)]];
						else
							VIP = Inst[3];
						end
					elseif ((Enum <= (142 - (17 + 86))) or (3168 < 2153)) then
						if ((Enum <= 37) or ((3378 + 1598) < (2969 - 1637))) then
							if ((Enum == (104 - 68)) or (1049 <= 906)) then
								if (((4794 - (122 + 44)) == (7993 - 3365)) and (4513 > 2726) and (Stk[Inst[6 - 4]] == Inst[4 + 0])) then
									VIP = VIP + 1 + 0;
								else
									VIP = Inst[5 - 2];
								end
							else
								Stk[Inst[67 - (30 + 35)]][Inst[3 + 0]] = Stk[Inst[1261 - (1043 + 214)]];
							end
						elseif (Enum > 38) then
							Stk[Inst[2]] = Stk[Inst[11 - 8]][Inst[1216 - (323 + 889)]];
						else
							Stk[Inst[5 - 3]] = Stk[Inst[3]][Inst[4]];
						end
					elseif ((Enum <= 41) or ((2061 - (361 + 219)) >= (2978 - (53 + 267))) or (54 == 395)) then
						if (Enum > (10 + 30)) then
							if ((82 == 82) and (Inst[415 - (15 + 398)] == Stk[Inst[986 - (18 + 964)]])) then
								VIP = VIP + (3 - 2);
							else
								VIP = Inst[2 + 1];
							end
						else
							Stk[Inst[2 + 0]] = Inst[853 - (20 + 830)];
						end
					elseif (Enum > (33 + 9)) then
						Stk[Inst[128 - (116 + 10)]] = Stk[Inst[3]];
					else
						local B = Inst[1 + 2];
						local K = Stk[B];
						for Idx = B + 1, Inst[4] do
							K = K .. Stk[Idx];
						end
						Stk[Inst[2]] = K;
					end
				elseif ((Enum <= (788 - (542 + 196))) or ((1245 - 664) < (83 + 199))) then
					if (Enum <= 46) then
						if ((Enum <= (23 + 21)) or ((1160 + 2060) == (3594 - 2230)) or ((11816 - 7207) < (4046 - (1126 + 425)))) then
							Stk[Inst[407 - (118 + 287)]] = Stk[Inst[11 - 8]];
						elseif (((2273 - (118 + 1003)) == 1152) and ((Enum > 45) or (1054 > 3392))) then
							Stk[Inst[2]] = {};
						elseif (((5548 - 3652) <= (3799 - (142 + 235))) and not Stk[Inst[9 - 7]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= (11 + 37)) then
						if ((Enum > 47) or ((1967 - (553 + 424)) > (3063 - 1443))) then
							local B = Stk[Inst[4]];
							if (B or (877 > (4136 + 559))) then
								VIP = VIP + 1;
							else
								Stk[Inst[2 + 0]] = B;
								VIP = Inst[3];
							end
						else
							Stk[Inst[2 + 0]][Stk[Inst[2 + 1]]] = Stk[Inst[3 + 1]];
						end
					elseif ((2691 >= (4012 - 2161)) and ((Enum == (136 - 87)) or ((1513 - 837) >= 1642))) then
						if (((4136 > 2397) and not Stk[Inst[1 + 1]]) or (2985 >= 4856)) then
							VIP = VIP + (4 - 3);
						else
							VIP = Inst[3];
						end
					else
						Stk[Inst[755 - (239 + 514)]] = Env[Inst[3]];
					end
				elseif (Enum <= (19 + 35)) then
					if ((Enum <= (1381 - (797 + 532))) or (4334 == 4245)) then
						if (((3108 + 1168) >= 1195) and ((Enum == 51) or (4276 <= 3031))) then
							local A = Inst[1 + 1];
							local B = Stk[Inst[6 - 3]];
							Stk[A + 1] = B;
							Stk[A] = B[Inst[1206 - (373 + 829)]];
						else
							do
								return;
							end
						end
					elseif (((3963 - (476 + 255)) <= (5820 - (369 + 761))) and (Enum > (31 + 22))) then
						Upvalues[Inst[5 - 2]] = Stk[Inst[3 - 1]];
					else
						local A = Inst[240 - (64 + 174)];
						local T = Stk[A];
						local B = Inst[3];
						for Idx = 1, B do
							T[Idx] = Stk[A + Idx];
						end
					end
				elseif (Enum <= 56) then
					if ((Enum > 55) or (896 >= (449 + 2697))) then
						Stk[Inst[2 - 0]] = Env[Inst[339 - (144 + 192)]];
					elseif ((Stk[Inst[2]] == Inst[220 - (42 + 174)]) or ((3593 + 1189) <= (994 + 205))) then
						VIP = VIP + 1;
					else
						VIP = Inst[2 + 1];
					end
				elseif ((3061 >= 2958) and ((Enum == (1561 - (363 + 1141))) or ((6444 - (1183 + 397)) < (5790 - 3888)))) then
					local A = Inst[2];
					local T = Stk[A];
					local B = Inst[3 + 0];
					for Idx = 1, B do
						T[Idx] = Stk[A + Idx];
					end
				else
					local A = Inst[2];
					Stk[A](Stk[A + 1]);
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCalletFEnv(), ...);